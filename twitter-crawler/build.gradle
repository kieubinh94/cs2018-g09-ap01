buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        // ASSUMES GRADLE 2.12 OR HIGHER. Use plugin version 0.7.5 with earlier
        // gradle versions
        classpath "com.google.protobuf:protobuf-gradle-plugin:0.8.0"
        classpath "net.ltgt.gradle:gradle-apt-plugin:0.13"
        // plug-in for git tag version
        classpath 'net.researchgate:gradle-release:2.4.0'
        classpath "com.diffplug.spotless:spotless-plugin-gradle:3.6.0"
        // plugin to manage the manifest services
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.2'
    }
}

plugins {
    id "org.sonarqube" version "2.6.2"
}

def props = new Properties()
file("version.properties").withInputStream { props.load(it) }

group = props.getProperty("group")
version = props.getProperty("version")

def grpcVersion = '1.11.0'
def beamVersion = '2.4.0'

apply plugin: "java"
apply plugin: "pmd"
apply plugin: "findbugs"
apply plugin: "maven"
apply plugin: "application"
apply plugin: 'idea'
apply plugin: 'net.ltgt.apt'
apply plugin: "com.diffplug.gradle.spotless"
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'jacoco'

sourceCompatibility = 1.8
targetCompatibility = 1.8

mainClassName = "cs2018.ap.streaming.SimpleStreamingPipeline"

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

repositories {
    mavenCentral()
    jcenter()
}

run {
    if (System.getProperty("exec.args") != null) {
        args System.getProperty("exec.args").split()
    }
}

pmd {
    rulePriority = 3
    ruleSetFiles = files("pmd-ruleset.xml")
    toolVersion = "5.1.2"
    ignoreFailures = true
}

tasks.withType(Pmd) {
    excludes = [
            '**/AutoValue_*.java'
    ]
}

build {
    dependsOn(shadowJar)
}


task dependencies(type: Copy) {
    from configurations.runtime
    into 'build/libs/dependencies'
}


test {
    exclude "**/*IntegrationTests*"
    exclude "**/*AcceptanceTests*"
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
    }
    if (project.hasProperty('excludeTests')) {
        def values = project.property('excludeTests').split(',')
        values.each { excludeTest ->
            exclude excludeTest
        }
    }
}

task integTest(type: Test) {
    include "**/*IntegrationTests*"
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
    }
    if (project.hasProperty('excludeTests')) {
        def values = project.property('excludeTests').split(',')
        values.each { excludeTest ->
            exclude excludeTest
        }
    }
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

spotless {
    java {
        googleJavaFormat()
    }
}

dependencies {
    compile group: 'com.beust', name: 'jcommander', version: '1.72'
    compile group: 'org.postgresql', name: 'postgresql', version: '42.1.4'
    compile group: 'redis.clients', name: 'jedis', version: '2.9.0'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.9.0'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.0'
    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jdk8', version: '2.9.0'
    compile group: 'com.google.cloud', name: 'google-cloud-pubsub', version: '1.35.0'
    compile group: 'com.google.cloud', name: 'google-cloud-monitoring', version: '1.35.0'
    // Code gen, annotations
    compileOnly group: 'com.google.auto.value', name: 'auto-value', version: '1.5'
    apt group: 'com.google.auto.value', name: 'auto-value', version: '1.5'
    compile group: 'org.codehaus.mojo', name: 'findbugs-maven-plugin', version: '3.0.4'
    // Common
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.6'
    compile group: 'org.apache.commons', name: 'commons-text', version: '1.3'
    compile group: 'commons-codec', name: 'commons-codec', version: '1.11'
    compile group: 'com.google.guava', name: 'guava', version: '19.0'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.6.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.6.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.6.2'
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.9.2'
    compile group: 'com.google.http-client', name: 'google-http-client', version: '1.23.0'
    compile group: 'com.fiftyonred', name: 'mock-jedis',  version:'0.4.0'
    compile group: 'org.elasticsearch.client', name: 'rest', version: '5.5.3'

    // Scheduling
    compile group: 'org.quartz-scheduler', name: 'quartz', version: '2.3.0'
    compile group: 'org.quartz-scheduler', name: 'quartz-jobs', version: '2.3.0'

    compile("org.elasticsearch.client:elasticsearch-rest-high-level-client:6.3.2") {
        exclude group: "org.apache.logging.log4j"
        force = true
    }

    // Test
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.9.5'
    testCompile group: 'org.skyscreamer', name: 'jsonassert', version: '1.5.0'
    
    testCompile group: "org.powermock", name: "powermock-mockito-release-full", version: "1.6.4"
    testCompile group: "io.grpc", name: "grpc-testing", version: "${grpcVersion}"
    testCompile group: "com.fiftyonred", name: "mock-jedis", version: "0.4.0"
    testCompile group: "com.github.tlrx", name: "elasticsearch-test", version: "1.2.1"
    testCompile group: 'org.skyscreamer', name: 'jsonassert', version: '1.5.0'
    testCompile group: 'org.apache.commons', name: 'commons-csv', version: '1.5'
    testCompile group: 'com.netflix.rxjava', name: 'rxjava-core', version: '0.19.0'
    testCompile group: 'org.apache.tika', name: 'tika-core', version: '1.18'
    testCompile group: 'org.apache.tika', name: 'tika-parsers', version: '1.18'
    testCompile group: 'org.apache.tika', name: 'tika-langdetect', version: '1.18'
    testCompile group: "com.google.code.findbugs", name: "annotations", version: "3.0.1"
    testCompile group: "com.google.code.findbugs", name: "jsr305", version: "3.0.1"

    testCompile 'junit:junit:[4,)'
}

idea {
    module {
        // Not using generatedSourceDirs because of
        // https://discuss.gradle.org/t/support-for-intellij-2016/15294/8
        sourceDirs += file("${projectDir}/build/generated/source/apt/main");
        sourceDirs += file("${projectDir}/build/generated/source/proto/main/java");
        sourceDirs += file("${projectDir}/build/generated/source/proto/main/grpc");
    }
}

[distZip, distTar].each { task ->
    configurations.archives.artifacts.removeAll
            { it.class.simpleName == "ArchivePublishArtifact" && it.archiveTask == task }

    task.enabled = false
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "$System.env.MVN_REPO") {
                authentication(userName: "$System.env.MVN_REPO_USERNAME", password: "$System.env.MVN_REPO_PASS")
            }
            addFilter('ppl') { artifact, file ->
                artifact.name == props.getProperty("name")
            }
            pom('ppl').groupId = props.getProperty("group")
            pom('ppl').artifactId = props.getProperty("name")
            pom('ppl').version = props.getProperty("version")
        }
    }
}

jar {
    manifest {
        attributes("Implementation-Version": version)
    }
}

shadowJar {
    zip64 = true
    mergeServiceFiles()
}
